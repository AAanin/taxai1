// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  avatar    String?
  dateOfBirth DateTime?
  gender    String?
  address   String?
  emergencyContact String?
  bloodGroup String?
  allergies String[]
  chronicConditions String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  medicalRecords MedicalRecord[]
  prescriptions  Prescription[]
  appointments   Appointment[]
  medicineReminders MedicineReminder[]
  reports        Report[]
  chatSessions   ChatSession[]

  @@map("users")
}

// Doctor model
model Doctor {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  specialization String
  qualification String?
  experience  Int?
  hospital    String?
  address     String?
  consultationFee Decimal?
  rating      Float?   @default(0)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  prescriptions Prescription[]

  @@map("doctors")
}

// Medical Record model
model MedicalRecord {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  diagnosis   String?
  symptoms    String[]
  treatment   String?
  notes       String?
  recordDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

// Prescription model
model Prescription {
  id          String   @id @default(cuid())
  userId      String
  doctorId    String?
  title       String
  medicines   PrescriptionMedicine[]
  instructions String?
  diagnosis   String?
  prescriptionDate DateTime @default(now())
  validUntil  DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor      Doctor?  @relation(fields: [doctorId], references: [id])

  @@map("prescriptions")
}

// Medicine model
model Medicine {
  id          String   @id @default(cuid())
  name        String
  genericName String?
  brand       String?
  category    String?
  dosageForm  String?  // tablet, capsule, syrup, etc.
  strength    String?
  manufacturer String?
  price       Decimal?
  description String?
  sideEffects String[]
  contraindications String[]
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  prescriptionMedicines PrescriptionMedicine[]
  medicineReminders     MedicineReminder[]

  @@map("medicines")
}

// Junction table for Prescription and Medicine
model PrescriptionMedicine {
  id             String   @id @default(cuid())
  prescriptionId String
  medicineId     String
  dosage         String   // e.g., "1 tablet"
  frequency      String   // e.g., "twice daily"
  duration       String   // e.g., "7 days"
  instructions   String?
  createdAt      DateTime @default(now())

  // Relations
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  medicine       Medicine     @relation(fields: [medicineId], references: [id])

  @@unique([prescriptionId, medicineId])
  @@map("prescription_medicines")
}

// Medicine Reminder model
model MedicineReminder {
  id          String   @id @default(cuid())
  userId      String
  medicineId  String
  medicineName String
  dosage      String
  frequency   String
  startDate   DateTime
  endDate     DateTime?
  reminderTimes String[] // Array of time strings like ["08:00", "20:00"]
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicine    Medicine @relation(fields: [medicineId], references: [id])

  @@map("medicine_reminders")
}

// Appointment model
model Appointment {
  id          String   @id @default(cuid())
  userId      String
  doctorId    String
  title       String?
  description String?
  appointmentDate DateTime
  duration    Int?     // in minutes
  status      AppointmentStatus @default(SCHEDULED)
  type        AppointmentType   @default(CONSULTATION)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id])

  @@map("appointments")
}

// Report model for medical reports and test results
model Report {
  id          String   @id @default(cuid())
  userId      String
  title       String
  type        ReportType
  description String?
  fileUrl     String?
  fileName    String?
  fileSize    Int?
  reportDate  DateTime @default(now())
  labName     String?
  doctorName  String?
  results     Json?    // Store structured test results
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Chat Session model for AI conversations
model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  language    String   @default("bn")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@map("chat_sessions")
}

// Chat Message model
model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  content       String
  sender        MessageSender
  language      String   @default("bn")
  metadata      Json?    // Store additional message metadata
  createdAt     DateTime @default(now())

  // Relations
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Hospital model
model Hospital {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  type        String?  // government, private, specialized
  services    String[]
  emergencyServices Boolean @default(false)
  rating      Float?   @default(0)
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hospitals")
}

// Emergency Contact model
model EmergencyContact {
  id          String   @id @default(cuid())
  name        String
  phone       String
  type        String   // ambulance, fire, police, hospital
  address     String?
  description String?
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("emergency_contacts")
}

// Vaccination Schedule model
model VaccinationSchedule {
  id          String   @id @default(cuid())
  vaccineName String
  ageGroup    String   // "0-2 months", "6 months", "adult", etc.
  description String?
  schedule    String   // "At birth", "6 weeks", "Annual", etc.
  isRequired  Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vaccination_schedules")
}

// Health Tips model
model HealthTip {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String   // diet, exercise, mental_health, etc.
  language    String   @default("bn")
  tags        String[]
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("health_tips")
}

// Enums
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  CHECKUP
  VACCINATION
}

enum ReportType {
  BLOOD_TEST
  URINE_TEST
  X_RAY
  MRI
  CT_SCAN
  ECG
  ULTRASOUND
  PRESCRIPTION
  MEDICAL_CERTIFICATE
  OTHER
}

enum MessageSender {
  USER
  BOT
  DOCTOR
}