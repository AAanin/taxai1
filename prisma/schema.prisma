// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id        String   @id @db.Uuid
  email     String   @unique
  name      String?
  phone     String?
  avatar    String?
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  gender    String?
  address   String?
  emergencyContact String? @map("emergency_contact")
  bloodGroup String? @map("blood_group")
  allergies String[]
  chronicConditions String[] @map("chronic_conditions")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  medicalRecords MedicalRecord[]
  appointments   Appointment[]
  medicineReminders MedicineReminder[]
  chatSessions   ChatSession[]
  chatMessages   ChatMessage[]
  medicineLogs   MedicineLog[]
  healthMetrics  HealthMetric[]
  notifications  Notification[]
  chatAnalytics  ChatAnalytic[]

  @@map("users")
}

// Doctor model
model Doctor {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  specialty   String
  qualifications String[]
  experienceYears Int? @map("experience_years")
  hospitalName String? @map("hospital_name")
  address     String?
  phone       String?
  email       String?
  consultationFee Decimal? @map("consultation_fee")
  availableDays String[] @map("available_days")
  availableTimes Json @default("{}") @map("available_times")
  rating      Decimal @default(0.00)
  totalReviews Int @default(0) @map("total_reviews")
  isVerified  Boolean @default(false) @map("is_verified")
  isActive    Boolean @default(true) @map("is_active")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("doctors")
}

// Medical Record model
model MedicalRecord {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  recordType  String   @map("record_type")
  title       String
  description String?
  fileUrl     String?  @map("file_url")
  fileType    String?  @map("file_type")
  doctorName  String?  @map("doctor_name")
  hospitalName String? @map("hospital_name")
  dateRecorded DateTime @map("date_recorded") @db.Date
  tags        String[]
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medical_records")
}

// Medicine model
model Medicine {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  genericName String?  @map("generic_name")
  brandNames  String[] @map("brand_names")
  category    String
  dosageForms String[] @map("dosage_forms")
  strength    String?
  indications String[]
  contraindications String[]
  sideEffects String[] @map("side_effects")
  interactions String[]
  pregnancyCategory String? @map("pregnancy_category")
  priceRange  String?  @map("price_range")
  prescriptionRequired Boolean @default(true) @map("prescription_required")
  isAvailable Boolean  @default(true) @map("is_available")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("medicines")
}

// Medicine Reminder model
model MedicineReminder {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  medicineName String  @map("medicine_name")
  dosage      String
  frequency   String
  startDate   DateTime @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  reminderTimes DateTime[] @map("reminder_times") @db.Time
  instructions String?
  status      String   @default("active")
  adherenceRate Decimal @default(0.00) @map("adherence_rate")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicineLogs MedicineLog[]

  @@map("medicine_reminders")
}

// Appointment model
model Appointment {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  doctorName  String   @map("doctor_name")
  doctorSpecialty String? @map("doctor_specialty")
  hospitalName String? @map("hospital_name")
  appointmentDate DateTime @map("appointment_date") @db.Date
  appointmentTime DateTime @map("appointment_time") @db.Time
  appointmentType String? @map("appointment_type")
  status      String   @default("scheduled")
  symptoms    String?
  notes       String?
  reminderSent Boolean @default(false) @map("reminder_sent")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

// Chat Session model for AI conversations
model ChatSession {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  sessionName String?  @map("session_name")
  language    String   @default("bn")
  status      String   @default("active")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  analytics   ChatAnalytic[]

  @@map("chat_sessions")
}

// Chat Message model
model ChatMessage {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionId     String   @map("session_id") @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  messageType   String   @map("message_type")
  content       String
  metadata      Json @default("{}")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Hospital model
model Hospital {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  type        String?  // government, private, specialized
  services    String?
  emergencyServices Boolean @default(false)
  rating      Float?   @default(0)
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hospitals")
}

// Emergency Contact model
model EmergencyContact {
  id          String   @id @default(cuid())
  name        String
  phone       String
  type        String   // ambulance, fire, police, hospital
  address     String?
  description String?
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("emergency_contacts")
}

// Vaccination Schedule model
model VaccinationSchedule {
  id          String   @id @default(cuid())
  vaccineName String
  ageGroup    String   // "0-2 months", "6 months", "adult", etc.
  description String?
  schedule    String   // "At birth", "6 weeks", "Annual", etc.
  isRequired  Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("vaccination_schedules")
}

// Health Tips model
model HealthTip {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String   // diet, exercise, mental_health, etc.
  language    String   @default("bn")
  tags        String?
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("health_tips")
}

// Medicine Log model
model MedicineLog {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reminderId  String   @map("reminder_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  scheduledTime DateTime @map("scheduled_time")
  takenTime   DateTime? @map("taken_time")
  status      String
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  reminder    MedicineReminder @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("medicine_logs")
}

// Health Metric model
model HealthMetric {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  metricType  String   @map("metric_type")
  value       Decimal
  unit        String
  recordedDate DateTime @map("recorded_date") @db.Date
  recordedTime DateTime? @map("recorded_time") @db.Time @default(dbgenerated("CURRENT_TIME"))
  notes       String?
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_metrics")
}

// Notification model
model Notification {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  type        String
  title       String
  message     String
  isRead      Boolean  @default(false) @map("is_read")
  scheduledFor DateTime? @map("scheduled_for")
  sentAt      DateTime? @map("sent_at")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Chat Analytics model
model ChatAnalytic {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String?  @map("user_id") @db.Uuid
  sessionId   String?  @map("session_id") @db.Uuid
  queryText   String   @map("query_text")
  responseText String? @map("response_text")
  queryCategory String? @map("query_category")
  responseTimeMs Int?  @map("response_time_ms")
  modelUsed   String?  @map("model_used")
  language    String   @default("bn")
  satisfactionRating Int? @map("satisfaction_rating")
  metadata    Json @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  session     ChatSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_analytics")
}