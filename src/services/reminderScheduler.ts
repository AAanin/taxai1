import { redisClient } from './redisService';
import { redisReminderService, NotificationData } from './redisReminderService';
import { EventEmitter } from 'events';

// ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏
export interface WorkerStatus {
  id: string;
  isActive: boolean;
  lastHeartbeat: Date;
  processedCount: number;
  errorCount: number;
  currentTask?: string;
}

// ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
export interface SchedulerConfig {
  checkInterval: number; // ‡¶Æ‡¶ø‡¶≤‡¶ø‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°
  batchSize: number;
  maxRetries: number;
  workerCount: number;
  deadLetterThreshold: number; // ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
  enableMetrics: boolean;
}

// ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏
export interface SchedulerMetrics {
  totalProcessed: number;
  totalErrors: number;
  averageProcessingTime: number;
  queueLength: number;
  activeWorkers: number;
  lastProcessedAt: Date;
}

// ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞
export class ReminderScheduler extends EventEmitter {
  private static instance: ReminderScheduler;
  private isRunning: boolean = false;
  private workers: Map<string, WorkerStatus> = new Map();
  private checkInterval: NodeJS.Timeout | null = null;
  private config: SchedulerConfig;
  private metrics: SchedulerMetrics;
  private isInitialized: boolean = false;

  private constructor(config?: Partial<SchedulerConfig>) {
    super();
    
    this.config = {
      checkInterval: 60000, // 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
      batchSize: 10,
      maxRetries: 3,
      workerCount: 3,
      deadLetterThreshold: 5, // 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
      enableMetrics: true,
      ...config
    };

    this.metrics = {
      totalProcessed: 0,
      totalErrors: 0,
      averageProcessingTime: 0,
      queueLength: 0,
      activeWorkers: 0,
      lastProcessedAt: new Date()
    };
  }

  public static getInstance(config?: Partial<SchedulerConfig>): ReminderScheduler {
    if (!ReminderScheduler.instance) {
      ReminderScheduler.instance = new ReminderScheduler(config);
    }
    return ReminderScheduler.instance;
  }

  /**
   * ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßá
   */
  public async initialize(): Promise<void> {
    try {
      if (this.isInitialized) return;

      // Redis connection ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
      await redisClient.ping();
      
      // ReminderService ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
      await redisReminderService.initialize();
      
      // ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
      await this.initializeWorkers();
      
      // ‡¶°‡ßá‡¶° ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
      await this.cleanupDeadLetterQueue();
      
      console.log('‚úÖ Reminder Scheduler initialized successfully');
      this.isInitialized = true;
    } catch (error) {
      console.error('‚ùå Failed to initialize Reminder Scheduler:', error);
      throw error;
    }
  }

  /**
   * ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá
   */
  public async start(): Promise<void> {
    try {
      if (this.isRunning) {
        console.log('‚ö†Ô∏è Scheduler is already running');
        return;
      }

      if (!this.isInitialized) {
        await this.initialize();
      }

      this.isRunning = true;
      
      // ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
      this.checkInterval = setInterval(() => {
        this.checkScheduledReminders().catch(error => {
          console.error('‚ùå Error in scheduled reminder check:', error);
          this.emit('error', error);
        });
      }, this.config.checkInterval);

      // ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞‡ßç‡¶ü‡¶¨‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï‡¶æ‡¶∞
      setInterval(() => {
        this.checkWorkerHealth().catch(console.error);
      }, 30000); // 30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°

      // ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡¶æ‡¶∞
      if (this.config.enableMetrics) {
        setInterval(() => {
          this.updateMetrics().catch(console.error);
        }, 60000); // 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
      }

      console.log('‚úÖ Reminder Scheduler started');
      this.emit('started');
    } catch (error) {
      console.error('‚ùå Failed to start scheduler:', error);
      throw error;
    }
  }

  /**
   * ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá
   */
  public async stop(): Promise<void> {
    try {
      if (!this.isRunning) {
        console.log('‚ö†Ô∏è Scheduler is not running');
        return;
      }

      this.isRunning = false;
      
      if (this.checkInterval) {
        clearInterval(this.checkInterval);
        this.checkInterval = null;
      }

      // ‡¶∏‡¶¨ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
      await this.stopAllWorkers();

      console.log('‚úÖ Reminder Scheduler stopped');
      this.emit('stopped');
    } catch (error) {
      console.error('‚ùå Failed to stop scheduler:', error);
      throw error;
    }
  }

  /**
   * ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá
   */
  public async checkScheduledReminders(): Promise<void> {
    try {
      const now = new Date();
      const reminderIds = await redisReminderService.getScheduledReminders(now);
      
      if (reminderIds.length === 0) {
        return;
      }

      console.log(`üìã Found ${reminderIds.length} scheduled reminders to process`);
      
      // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
      await this.processBatchReminders(reminderIds);
      
    } catch (error) {
      console.error('‚ùå Error checking scheduled reminders:', error);
      this.metrics.totalErrors++;
      throw error;
    }
  }

  /**
   * ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßá
   */
  public async processBatchReminders(reminderIds: string[]): Promise<void> {
    try {
      const batches = this.createBatches(reminderIds, this.config.batchSize);
      
      // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶≤‡ßá‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
      const promises = batches.map((batch, index) => 
        this.processBatch(batch, `batch-${index}`)
      );
      
      await Promise.allSettled(promises);
      
      console.log(`‚úÖ Processed ${reminderIds.length} reminders in ${batches.length} batches`);
    } catch (error) {
      console.error('‚ùå Error processing batch reminders:', error);
      throw error;
    }
  }

  /**
   * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßá
   */
  private async processBatch(reminderIds: string[], batchId: string): Promise<void> {
    const startTime = Date.now();
    
    try {
      const worker = this.getAvailableWorker();
      if (!worker) {
        // ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶™‡¶æ‡¶†‡¶æ‡¶®
        await this.requeueReminders(reminderIds);
        return;
      }

      worker.currentTask = batchId;
      worker.lastHeartbeat = new Date();
      
      // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®
      for (const reminderId of reminderIds) {
        try {
          await this.processReminder(reminderId, worker.id);
          worker.processedCount++;
          this.metrics.totalProcessed++;
        } catch (error) {
          console.error(`‚ùå Error processing reminder ${reminderId}:`, error);
          worker.errorCount++;
          this.metrics.totalErrors++;
          
          // ‡¶´‡ßá‡¶á‡¶≤‡ßç‡¶° ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
          await this.handleFailedReminder(reminderId, error as Error);
        }
      }
      
      worker.currentTask = undefined;
      
      // ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      const processingTime = Date.now() - startTime;
      this.updateAverageProcessingTime(processingTime);
      
    } catch (error) {
      console.error(`‚ùå Error in batch ${batchId}:`, error);
      await this.requeueReminders(reminderIds);
      throw error;
    }
  }

  /**
   * ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßá
   */
  private async processReminder(reminderId: string, workerId: string): Promise<void> {
    try {
      // ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
      await redisClient.zrem('reminder:schedule', reminderId);
      
      // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
      await redisReminderService.triggerNotification(reminderId);
      
      console.log(`‚úÖ Processed reminder ${reminderId} by worker ${workerId}`);
      
    } catch (error) {
      console.error(`‚ùå Failed to process reminder ${reminderId}:`, error);
      throw error;
    }
  }

  /**
   * ‡¶´‡ßá‡¶á‡¶≤‡ßç‡¶° ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡ßá
   */
  public async handleFailedReminder(reminderId: string, error: Error): Promise<void> {
    try {
      const retryKey = `reminder:retry:${reminderId}`;
      const retryCount = await redisClient.incr(retryKey);
      
      // TTL ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (1 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ)
      await redisClient.expire(retryKey, 3600);
      
      if (retryCount <= this.config.maxRetries) {
        // ‡¶∞‡¶ø‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        const retryTime = Date.now() + (retryCount * 60000); // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∞‡¶ø‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶§‡ßá 1 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨
        await redisClient.zadd('reminder:retry', retryTime, reminderId);
        
        console.log(`üîÑ Retry scheduled for reminder ${reminderId} (attempt ${retryCount})`);
      } else {
        // ‡¶°‡ßá‡¶° ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®
        await this.moveToDeadLetterQueue(reminderId, error);
        
        console.log(`üíÄ Moved reminder ${reminderId} to dead letter queue after ${retryCount} attempts`);
      }
    } catch (err) {
      console.error('‚ùå Error handling failed reminder:', err);
    }
  }

  /**
   * ‡¶°‡ßá‡¶° ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â‡¶§‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º
   */
  private async moveToDeadLetterQueue(reminderId: string, error: Error): Promise<void> {
    try {
      const deadLetterData = {
        reminderId,
        error: error.message,
        timestamp: new Date().toISOString(),
        attempts: this.config.maxRetries
      };
      
      await redisClient.lpush('reminder:dead_letter', JSON.stringify(deadLetterData));
      
      // ‡¶∞‡¶ø‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™
      await redisClient.del(`reminder:retry:${reminderId}`);
      
    } catch (err) {
      console.error('‚ùå Error moving to dead letter queue:', err);
    }
  }

  /**
   * ‡¶°‡ßá‡¶° ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßá
   */
  private async cleanupDeadLetterQueue(): Promise<void> {
    try {
      const threshold = Date.now() - (this.config.deadLetterThreshold * 60 * 1000);
      
      // ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶™‡¶æ‡¶®
      const deadLetters = await redisClient.lrange('reminder:dead_letter', 0, -1);
      
      for (const deadLetterStr of deadLetters) {
        try {
          const deadLetter = JSON.parse(deadLetterStr);
          const timestamp = new Date(deadLetter.timestamp).getTime();
          
          if (timestamp < threshold) {
            // ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
            await redisClient.lrem('reminder:dead_letter', 1, deadLetterStr);
            console.log(`üßπ Cleaned up old dead letter: ${deadLetter.reminderId}`);
          }
        } catch (parseError) {
          // ‡¶á‡¶®‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
          await redisClient.lrem('reminder:dead_letter', 1, deadLetterStr);
        }
      }
    } catch (error) {
      console.error('‚ùå Error cleaning up dead letter queue:', error);
    }
  }

  /**
   * ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡¶ø‡¶â ‡¶ï‡¶∞‡ßá
   */
  private async requeueReminders(reminderIds: string[]): Promise<void> {
    try {
      const requeueTime = Date.now() + 30000; // 30 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßá
      
      for (const reminderId of reminderIds) {
        await redisClient.zadd('reminder:schedule', requeueTime, reminderId);
      }
      
      console.log(`üîÑ Requeued ${reminderIds.length} reminders`);
    } catch (error) {
      console.error('‚ùå Error requeuing reminders:', error);
    }
  }

  /**
   * ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßá
   */
  private async initializeWorkers(): Promise<void> {
    try {
      for (let i = 0; i < this.config.workerCount; i++) {
        const workerId = `worker-${i + 1}`;
        const worker: WorkerStatus = {
          id: workerId,
          isActive: true,
          lastHeartbeat: new Date(),
          processedCount: 0,
          errorCount: 0
        };
        
        this.workers.set(workerId, worker);
      }
      
      console.log(`‚úÖ Initialized ${this.config.workerCount} workers`);
    } catch (error) {
      console.error('‚ùå Error initializing workers:', error);
      throw error;
    }
  }

  /**
   * ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶™‡¶æ‡¶®
   */
  private getAvailableWorker(): WorkerStatus | null {
    for (const worker of this.workers.values()) {
      if (worker.isActive && !worker.currentTask) {
        return worker;
      }
    }
    return null;
  }

  /**
   * ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá
   */
  private async checkWorkerHealth(): Promise<void> {
    try {
      const now = new Date();
      const healthThreshold = 5 * 60 * 1000; // 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
      
      for (const worker of this.workers.values()) {
        const timeSinceHeartbeat = now.getTime() - worker.lastHeartbeat.getTime();
        
        if (timeSinceHeartbeat > healthThreshold) {
          console.log(`‚ö†Ô∏è Worker ${worker.id} appears unhealthy, restarting...`);
          
          // ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
          worker.isActive = true;
          worker.lastHeartbeat = now;
          worker.currentTask = undefined;
        }
      }
    } catch (error) {
      console.error('‚ùå Error checking worker health:', error);
    }
  }

  /**
   * ‡¶∏‡¶¨ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá
   */
  private async stopAllWorkers(): Promise<void> {
    try {
      for (const worker of this.workers.values()) {
        worker.isActive = false;
        worker.currentTask = undefined;
      }
      
      console.log('‚úÖ All workers stopped');
    } catch (error) {
      console.error('‚ùå Error stopping workers:', error);
    }
  }

  /**
   * ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá
   */
  private createBatches<T>(items: T[], batchSize: number): T[][] {
    const batches: T[][] = [];
    
    for (let i = 0; i < items.length; i += batchSize) {
      batches.push(items.slice(i, i + batchSize));
    }
    
    return batches;
  }

  /**
   * ‡¶ó‡¶°‡¶º ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá
   */
  private updateAverageProcessingTime(processingTime: number): void {
    const alpha = 0.1; // EMA smoothing factor
    this.metrics.averageProcessingTime = 
      (alpha * processingTime) + ((1 - alpha) * this.metrics.averageProcessingTime);
  }

  /**
   * ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá
   */
  private async updateMetrics(): Promise<void> {
    try {
      this.metrics.queueLength = await redisClient.zcard('reminder:schedule');
      this.metrics.activeWorkers = Array.from(this.workers.values())
        .filter(w => w.isActive).length;
      this.metrics.lastProcessedAt = new Date();
      
      // ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      this.emit('metrics', this.metrics);
    } catch (error) {
      console.error('‚ùå Error updating metrics:', error);
    }
  }

  /**
   * ‡¶∏‡ßç‡¶ï‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶™‡¶æ‡¶®
   */
  public getStatus(): {
    isRunning: boolean;
    isInitialized: boolean;
    config: SchedulerConfig;
    metrics: SchedulerMetrics;
    workers: WorkerStatus[];
  } {
    return {
      isRunning: this.isRunning,
      isInitialized: this.isInitialized,
      config: this.config,
      metrics: this.metrics,
      workers: Array.from(this.workers.values())
    };
  }

  /**
   * ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßá
   */
  public updateConfig(newConfig: Partial<SchedulerConfig>): void {
    this.config = { ...this.config, ...newConfig };
    
    // ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶≠‡¶æ‡¶≤ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    if (newConfig.checkInterval && this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = setInterval(() => {
        this.checkScheduledReminders().catch(error => {
          console.error('‚ùå Error in scheduled reminder check:', error);
          this.emit('error', error);
        });
      }, this.config.checkInterval);
    }
    
    console.log('‚úÖ Scheduler config updated');
  }

  /**
   * ‡¶°‡ßá‡¶° ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â ‡¶™‡¶æ‡¶®
   */
  public async getDeadLetterQueue(): Promise<any[]> {
    try {
      const deadLetters = await redisClient.lrange('reminder:dead_letter', 0, -1);
      return deadLetters.map(dl => {
        try {
          return JSON.parse(dl);
        } catch {
          return { raw: dl, error: 'Invalid JSON' };
        }
      });
    } catch (error) {
      console.error('‚ùå Error getting dead letter queue:', error);
      throw error;
    }
  }

  /**
   * ‡¶°‡ßá‡¶° ‡¶≤‡ßá‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶â ‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
   */
  public async clearDeadLetterQueue(): Promise<void> {
    try {
      await redisClient.del('reminder:dead_letter');
      console.log('‚úÖ Dead letter queue cleared');
    } catch (error) {
      console.error('‚ùå Error clearing dead letter queue:', error);
      throw error;
    }
  }
}

// ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤‡¶ü‡¶® ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü
export const reminderScheduler = ReminderScheduler.getInstance();